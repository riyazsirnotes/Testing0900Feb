======================= Java Season - 1=======

**********************************************
Mar 23rd Thursday
**********************************************

Features of Java :

1. Simple 




+ - *  /  %



2 + 3 = 5 

+ is now overloaded to do power

2 + 3 = 8


Garbage Collector :

2. Robust :

3. Secure :


4. OO Object Oriented Programming 

Class
Object
Encapsulation
Polymorphism
Inheritance
Abstraction

5. Platform Independent
6. Architectural Neutral 
   Processor + RAM 
7. Portability :

     Architecture 
---------------------------------------------------------------------
\Features of Java :


1. Simple

- syntax is simialr to C++
- removed confusing concepts like explicit pointers and Operator Overloading
- memory management done by Garbage Collector in Java 


2. Object Oriented Programming 

OO is a methodology for development and maintance of application.

1. Object
2. Class
3. Encapsulation
4. Polymorphism
5. Inheritance
6. Abstraction

3. Robust :

- Strong mem management 

- exception handling mechanism

- type checking mechanism


4. Secure :


5. Platform Independent :

here Platform means OS (operating System)

6. Architectural Neutral :

Architecture means Processor and RAM 

7. Portable :

Portable means Architecture (means one way of classification)

IBM

Apple

Solaris

WORA :  Write Once Run Anywhere

-------------------------------------------------------------------------


**********************************************
Mar 24th Friday
**********************************************

jdk installation :


version : JAVA SE 11 or jdk 1.11

https://www.oracle.com/in/java/technologies/downloads/

Click on Java 11 tab

Click on "Windows" tab

Under Download 

Click  on below link

jdk-11.0.18_windows-x64_bin.exe


Enter Oracle Credentials in below form


Oracle account sign in


if you don't have Oracle Account create a new one from below link


https://profile.oracle.com/myprofile/account/create-account.jspx


-----------------------------------------------
Configuration of Java
------------------------------------------------------------

In Environment VAribales

Create 2 variables 


1. JAVA_HOME

Varibale Name : JAVA_HOME

Value : path till jdk



2.path : 

Varibale Name : path

Value : C:\Program Files\Java\jdk-11\bin

C:\Users\Riyaz>java -version
java version "11.0.18" 2023-01-17 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.18+9-LTS-195)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.18+9-LTS-195, mixed mode)




**********************************************
Mar 27th Monday
**********************************************


										jdk folders
										
										
				lib							bin/tools						jre



lib : Library 

predefined stuff which helps in designing / development of java applications


										lib
										|
			collection of jars ( jar is similar to zip folder)
										|
			collection of packages (package is similar to folder )
										|
			Collection of Classes 				and 			Interfaces  
							|										|					
					________________						   ________________
					|				|						  |				 	|
				variables		methods                Constants/Fields		Abstract methods
				
				
				

----------------------------------------------------------------------------

bin : binaries (some excutable files)

			
javac : tool or command ussed to compile java program
 
 syntax 
 
javac FileName.java



java : this tool or command is used to run/execute the compiled java program


syntax


java FileName


-------------------------------------------------------------------------------

jre :  (Java Runtime Environment)


JVM are abstract machines 

having tasks with no body

who will fill the tasks body ? Ans : JRE 



										JVM (Java Virtual Machine)
													|
							------------------------------------------------						
							|						|					     |
						CLSS						EE						GC
					Class Loader Subsystem		Execution Engine		Garbage Collector
													|
											 ________________
											 |				 |
										Interpreter	        JIT compiler (Just In Time)
										
CLSS:											

- Loading

- Linking 

- Intialization



**********************************************
Mar 28th Tuesday
**********************************************

					
----------------------------------
EE	 :

Interpreter	:  converts BC to MC   based on OS  and also execute

JIT Compiler : 

comes to picture when we have loops or iterative conditions 
to improve high performance


-----------------------------------------

GC (Garbage Collection)

1) Mark  - to identify the varibales or objects which can be deallocated


2) Sweep - to deallocate the memory


----------------------------------------------

Structure of Java Program

-----------------------------------------------

consists of 4 sections

1. Documentation Section

2. Package Section

3. Import Section

4. Class / Interface Section



--------------------------------------------------------------

1. Documentation Section :

used for documentation purpose means comments

single line comment  by means of 

//

multi line comment 

/*  ljlkjkljlkj

kjhjkhkjhjkhkj

kjhkjhkjhjkhhk */


--------------------------------------------------------------


2. Package Section :

Package means Folders

in java is package is used for logical grouping of your classes and interfaces

syntax :

package package-name;

e.g  

package mar27th;

package smoke;

--------------------------------------------------------------


3. Import Section 
										
3 ways to use import statement

i)  import packname.*;   ==> this is not recommended in real time 


e.g 

import java.util.*;


ii) import packname.ClassName;

e.g import java.util.Scanner; ==> this is recommended



Note : 

default package of java is 

java.lang package , there is no need to import java.lang

---------------------------------------------------------------

Class or Interface Section


syntax :


access-specifier access-modifier class ClassName
{

//variables


//methods


}


**********************************************
Mar 29th Wednesday
**********************************************

------------------------------------------
Naming Convention
------------------------------------------


packages ( all lower case  ) :

e.g 


java.util

org.openqa.selenium

based

smoke

Classes / Interfaces  :  Title Case

e.g for Classes

Scanner

Sum

ChromeDriver

HashSet


e.g of Interfaces 

List

Iterator

WebDriver


variables/Objects :  (Camel Case =  Lower Case + Title Case)

e.g 

x

netSalary

costOfItem

allLinks

rollNo


methods / Abstract methods :  (Camel Case =  Lower Case + Title Case)

if some CamelCase along if braces (  


e.g 

println

nextInt

main 


 Constants/Fields  :  (All upper case)
 
 e.g 
 
 
 PI
 
 MAX_LIMIT
 
 
 =====================================================
 ============ Variables in Java ======================
 =====================================================
 
variables are classified based on location and behviour into 3 types

				
									Variables
									
									
			1)Local					  2)Instance or non-static		3) Static 
			
			
 =====================================================
 ============ Memory Blocks in Java===================
 =====================================================
 
 1) Class Area / Method Area
 
 .class files
 
 static variables
 
 static methods
 
 
 2) Heap Area ( Dynamic memory allocation)
 
 Objects
 
 Arrays
 
 3) Java Stack Area (JSA)
 
 local varibales
 
 expressions 
  
 current running logics
 
 4) String Constant Pool Area  (SCPA)
 
 for String literals 
 
 String s="Live Tech"
 
 
 -------------------------------
 Local Varibale 
 -------------------------------
 
 Def : Local varibales are the varibales which are declared inside methods
 
 syntax of varibale :
 
 access-specifier access-modifier data-type varibaleName = some value ; ==> declaration and initialization
 
 
 access-specifier access-modifier data-type varibaleName; == > varibale declaration
 
 varibaleName = some value ; ==> variable initialization 
 
 
 			
 =====================================================
 ============ Data Types in Java   ===================
 =====================================================
 
 Java is strongly typed language
		
		
					Data Types in Java
					
					
		1) Primitive datatypes(8)		2) non-primitive datatypes
													 or 
												Derived datatypes  [arrays ,String , Objects etc..]

 												
1) Def :

 varibales which are declared inside methods

2) where memory is allocated ?

Java stack Area 

3) When memory is getting allocated ?

when the method is called (during execution)

4) what is the calling style ?

the variable name itself

5) what is the scope or life time ?

till end of that method


Note : 

VariablesDemo1.java:14: error: variable y might not have been initialized
System.out.println("y is "+y);

JVM/CLSS won't intializa Local varibales ,

It's the duty / resposibity of Programmer / devloper to initilize some value to local variable

??????????????????????????????
Download Eclipse 

https://www.eclipse.org/downloads/


Click "Download package "  ==> MORE DOWNLOADS  on Right Side

Click on "Eclipse 2021-09 (4.21)" link

choose second one "Eclipse IDE for Enterprise Java and Web Developers"

Click on Windows x86_64



??????????????????????????????



**********************************************
Apr 4th Tuesday
**********************************************

 =====================================================
 ============ Variables in Java (cont..) ======================
 =====================================================
 
variables are classified based on location and behviour into 3 types

				
									Variables
									
									
			1)Local					  2)Instance or non-static		3) Static 


2)Instance or non-static	

 												
1) Def :

 variables declared inside a class but outside of method .
 
2) When memory is getting allocated ?

when you create an instance or object for the class where variable is declared ,
then only memory will get allocated .

how to create an instance or object of class ?

ClassName objectName=new ClassName();


3) where memory is allocated ?

Heap Area

4) what is the calling style ?


objectName.variableName

5) what is the scope or life time ?

till the last usage of object

================================
Static  Variables
=================================

												
1) Def :

 variables declared inside a class but outside of method having static modifier or keyword
 
2) When memory is getting allocated ?

during compile time 

3) where memory is allocated ?

Class Area / Method Area


4) what is the calling style ?

ClassName.variableName


5) what is the scope or life time ?

till end of program

**********************************************
Apr 5th Wednesday
**********************************************

 =====================================================
 ============ Methods in Java   ======================
 =====================================================
 
 Method is a set of instructions to perform some task .
 
 e.g 
 
 println("Hello World") 
 
 here println is methods having some lines of code which we are using
 
 ads of Methods :
 
 1) reduces duplictaion/redundancy of code
 2) improves code clarity
 3) resuability
 4) easy debugging 
 
									methods
									
									
				non-static								static
				
syntax :

access-specifier access-modifier return-type methodName(arguments / paramters)
{
//statements


return statement;

}


???????????????????????????????????????????????

Write A Program 
to calculate area of rectangle 

hint : area = length * breadth ;

use methods concept;
?????????????????????????????????????????????????

?????????????????????????????????????????????????
Write A Program 
to calculate simple interest

hint : SI = P*T*R /100;

SI simpleInterest
P princial amount
T time or duration
R rate of interest

use methods concept;
???????????????????????????????????????????????????



**********************************************
Apr 6th Thursday
**********************************************


OOPs (Object Oriented Programming)

before OOP there was POP (Procedure Oriented Programming)

e.g  C lang , COBOL, BASIC , FORTAN etc ..

Object Oriented Programming 

e.g 

C++ , Java , .net 


1) Object
2) Class 
3) Encapsulation
4) Polymorphism
5) Inheritance
6) Abstraction


Object : 

anything that exists is an object

e.g 

Fan , Chair , Dog ,bank account number etc ..


Object has 3 characteristics

i) State : Data or paramters that represents an object (variable's)

for Marker :

length 12 cm
shape cylindrical
color white


ii) Behaviour : task's or actions performed by Object ( method's)

e.g for Dog 

eating
drinking
sleeping

iii) identity : a unique Id defined by JVM to identify object

---------------------------------------------------------
Class :

A blueprint or template from which you can create an object 

e.g 

animal

automobiles

======================================================
===Object Creation Techniques ========================
======================================================
1) using new operator


ClassName objectName=new ClassName();

2) using Static Factory Method (SFM)


ClassName objectName=ClassName.methodName();

e.g

By by=By.id("username");

here id is a static method present in By class which return object of By class


3) using Non-Static Factory Method (NSFM)

ClassName1 object1=new ClassName1();

ClassName2 object2=object1.methodName();


XSSFWorkbook

XSSFSheet

XSSFWorkbook wb=new XSSFWorkbook();

there is a non-static method called getSheet(String) in XSSFWorkbook class  which will return object of XSSFSheet class

XSSFSheet ws=wb.getSheet("Sheet1");


4) using Clone method

5) using literals

String str="Live Tech";

6) using deserialization 

no syntax

this is used by JVM 



**********************************************
Apr 7th Friday
**********************************************


3) Encapsulation 

Encapsulation in Java is a process of data(varibales) and actions(methods) on data together into a single unit.

so every class is almost encapsulated

Encapsulation = Data Hiding +  Abstraction

e.g 

Medicine like coldact capsule 

ATM mahcine 

To Make Tightly Encapsulated ,

we use "private" access-specifier or access-label

The field Bank.balance is not visible

To overcome this , we will use public methods inside the class 
from which we retrive the private varibales


//getters and setters

are just public methods to retrive or modify private varibales 
through some validation


-------------------
PrintStream Class

4 methods 

1. println  ==> it will print and moves the cursor to next line

2. print  ==> print and cursor will stays in same 

* * * * *
  * * *
    *
3. printf same like printf from c lang meant for formating 

4. format == formating


obj1.setClock(1, 3, 23);
System.out.println(hr+":"+min+":"+sec);
1:3:23


01:03:23

?????????????????????????????????
Create a class DOB

use setter and getter 
to print your dob

expected :

e.g january 5th 1989

DD-MM-YYYY

05-01-1989
???????????????????????????????????




**********************************************
Apr 8th Saturday
**********************************************

Flow control or Control Flow in Java


1) Decission making or Selection statements

i) if else 

syntax :

if(condition)
{

//body

}
else
{

// code when condition is false

}


if only

if else

if else if else 

if else if else if ...... else

------------------
To scan or to take values during runtime  we use methods in Scanner class

java.util


if we want to take integer value

nextInt(): int

System.out.println("Hello World");

System is class present in java.lang

out is an predfined object of PrintStream(java.io) having static keyword



next() : String
next(String) : String
next(Pattern) : String
nextBoolean() : boolean
nextByte() : byte
nextByte(int) : byte
nextDouble() : double
nextFloat() : float
nextInt() : int
nextInt(int) : int
nextLine() : String
nextLong() : long
nextLong(int) : long
nextShort() : short
nextShort(int) : short


ii) switch

input can be byte , short ,int , char , String (from java 1.5)

switch(input)
{

case a : // action
         break;
		 
case b : // action 
		 break;
		 
		 |
		 
		 |
default : // default action
         		 
         




}


?????????????????????????

for 1030 batch

use Switch case to launch different browser 

chrome

firefox

edge

????????????????????????????????


------------------------------------
Loops
-------------------------------------

for loop :


for(initialization ; condition ; increment or decrement)
{

//body or statements

}


while loop :

while(condition)
{
//body or statements
increment or decrement;


}



**********************************************
Apr 10th Monday
**********************************************


this : 

when we have local varibales same as intance variables , local variables dominite

to overcome this , we are using "this" keyword cum operator

this is keyword which refers or replaces the current calling object reference

-----------------------------
Polymorphism
-----------------------------

poly means many

morph means forms 



The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

The method add(int, int) in the type Sum is not applicable for the arguments (long, long)


method signature :

 methodName + arguments
 

Method Overloading :

methodName is same but method signature is different

Method Overriding :

method signature is same



Method Overloading :


 i)arguments  having different datatypes 
 
 ii) variance in no of arguments
 
 iii) change in order of arguments (Not prefered)
 
 
 
**********************************************
Apr 11th Tuesday
**********************************************


Constructor :


is a method having same name as ClassName


Rules of Constructor :

i) Constructor name should be same as Class name.

ii) Constructor doesn't have return type 

Q) what happens if a return-type is give 

Ans )  it will be treated as normal or concrete method

iii) use public or protected access-specifier

default and private are not encouraged

iv) dont't specify any access-modifier (like static , abstract etc )

it will give error if specified


							Constructor
							
							
	default constructor 				paramterized Constructor
	or
	non-paramterized
	
	
---------------
Constructor Overloading
----------------


?????????????????????????????????????

generate Aadhar card number 


5123 4258 0124

?????????????????????????????????????

Create Aadhar

create some constructor's 

Aadhar(String panNo)
 etc
 
 
 expectd o/p :
 
 4521 4578 0123

????????????????????????????????????


---------------------------

Inheritance

----------------------------

Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.



**********************************************
Apr 12th Wednesday
**********************************************

extends is a keyword in java used for inheritance

class B extends A

here 

Class B   - child / Derived / Sub  class 

Class A   - parent / Base / Super class 



**********************************************
Apr 13th Thursday
**********************************************

Method overiding :

two methods having same signature defined in two class having Parent and child relationship(inheritance)

		// case 1
		
		// P obj1=new P();
		
		
		// case 2
		
		//C obj1=new C();
		
		// case 3
		
		P obj1=new C();
		
		System.out.println(obj1.x);
		 
		 obj1.m1(); 
		
		// case 4
		
		//C obj1=new P();  //not valid 
		
		
Super : 

it is a keyword cum operator , which a non-static ,
used to refer Current object Parent Reference

super can be used to refer 

Parent's variable
Parent's method
Parent constructor

---------------------------------
Abstraction
----------------------------------


								Abstraction
								
								
			Abstract class						Interfaces
			
			( 0 to 100 abstarction) 			(pure abstarction 100 % )


abstract method syntax :

access-specifier abstract return-type methodName(paramters or arguments);


**********************************************
Apr 14th Friday
**********************************************

-----------------------
Interface
-----------------------

syntax 


access-specifier modifier interface InterfaceName
{

// Constants/Fields

access-specifier static final data-type constantName = value;

here access-specifier mostly use public only


access-specifier abstract return-type methodName(paramters or arguments);

here access-specifier mostly use public only


}



**********************************************
Apr 25th Tuesday
**********************************************

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&& Java Season - 2 &&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Arrays :


similar to variables but which can store many elements or items


syntax :

access-specifier access-modifier data-type[]  variableName={value1,value2...valuen};

e.g.

int[] a={10,20,30,40,50};


syntax:

access-specifier access-modifier data-type[]  variableName=new data-type[size or lenegth  or no of items in array];



>>>>>> Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException:
 Index 5 out of bounds for length 5
	at apr25th.ArraysDemo3.main(ArraysDemo3.java:19)
	
>>>>>   Type mismatch: cannot convert from double to int

Def of Arrays :

Arrays are used to store similar or homogenous data-type values with fixed length.


Dis ads :

1. fixed length

No growable nature 


2. allows only similar data-type 


3. No predfined methods 


**********************************************
Apr 26th Wednesday
**********************************************


Collection Framework


java.util



								Iterable(I)
									|
								Collection(I)
									|
					------------------------------------
					|				|					|
				List(I)			Queue(I)			 Set(I)						
			
			- ArrayList(C)							- HashSet(C)
			
			


Collection(I)

-----------------------------------
add(E): boolean

E is an element or item or object of any data-type

-------------------------------------

contains(Object) : boolean 

it search for Element or Object in collection and returns 

true if present
false if not present

-------------------------------------------

isEmpty() : boolean

to check collection is empty or not

------------------------------------------------

size() : int

it returns no of objects or elements present in collection

---------------------------------------------------

remove(Object) : boolean

It removes the object in collection and returns true 

----------------------------------------------------

**********************************************************
**** Methods In List (I) *********************************
**********************************************************

get(int) : E 


It retrives the Element presnet in index given as integer


---------------------------------------------------

remove(int) : E


It removes the Element present at index given using interger

-----------------------------------------------------

add(int, E) == > will add Element at some index 
addAll(int, Collection<? extends E>) == > will add collection at some index
addAll(Collection<? extends E>)==> will add collection at the end

---------------------------------------------------------



**********************************************************
**** Methods and Constructor's  In ArrayList(C) **********
**********************************************************


ArrayList()
ArrayList(int)
ArrayList(Collection<? extends E>)

ArrayList al=new ArrayList();

al.add(123);

Element will get stored in indexed order


**********************************************
Apr 27th Thursday
**********************************************

the default capacity of arraylist is 10

when you create object of arraylist using default constructor

ArrayList al=new ArrayList();




-------------------------------

ArrayList(int) : this will be used for larger capacity

ArrayList al=new ArrayList(1000);

--------------------------------------

ArrayList(Collection<? extends E>) 

ArrayList b=new ArrayList(1000);

ArrayList al=new ArrayList(b);


--------------------------------------------



new Capaicty = Current Capacity * 3/2 +1

new capacity = 10 *3/2 + 1




[100, 200, 400, 500]
Using for loop
100
200
400
500
Using for-each or enchanced for loop
100
200
400
500


when to go for for loop and for-each loop ?


for loop when insertion order is preserved ( indexed format)

for-each loop is used when insertion order is not preserved 


----------------------------------------------------------------------------


iterator :


Iterator(I) : java.util

hasNext(): boolean

this will check is there any element present in next level


next(): E


this will retrive the element present in next level

and also moves the cursor to next level



************************
**** Set(I) ************
************************

this collection concept is meant for collecting unique ( no duplicates) elements

HashSet (C)


HashSet()
HashSet(int)
HashSet(int, float)  ==> here float is to define loading factor 
HashSet(int, float, boolean)
HashSet(Collection<? extends E>)




**********************************************
Apr 28th Friday
**********************************************



-----------------------------------------
Exception Handling
-----------------------------------------

Runtime error is nothing exception ,

when exception occurs program terminates or abort without executing remaining program

to handle this in java we have below keywords

5 keywords

try
catch
finally
throw
throws

try-catch mechanism

try
{
//risky code
}
catch(Exception reference)
{
//user friendly code
or exception message
}



Exception in thread "main" java.lang.ArithmeticException: / by zero
	at apr28th.ExceptionDemo1.main(ExceptionDemo1.java:15)




combinations for try catch finally

try catch

try catch catch ..catch

try catch finally

try catch catch ..catch finallly


try finally


==================================
===Exception Hiererchy ===========
==================================

Throwable (C)


getMessage() : String

 to get the exception / error message

printStackTrace(): void

this will print the trace (all detailed message with error and lines where errored occured) in console


							Exception

		checked Exceptions					UnChecked Exceptions




**********************************************
Apr 29th Saturday
**********************************************

Programming Concepts 


Arithmetic Operators 


+ addition

- subraction

* multiplication

/ diviosn( Quotient)

% Modulus Division ( remainder after division)


???????????????????????????????

WAP to print first 10 prime numbers

????????????????????????????????

Armstrong number is a number that is equal to the sum of cubes of its digits

151

pow(1,3)+pow(5,3)+pow(1,3)










