======================= Java Season - 1=======

**********************************************
Mar 23rd Thursday
**********************************************

Features of Java :

1. Simple 




+ - *  /  %



2 + 3 = 5 

+ is now overloaded to do power

2 + 3 = 8


Garbage Collector :

2. Robust :

3. Secure :


4. OO Object Oriented Programming 

Class
Object
Encapsulation
Polymorphism
Inheritance
Abstraction

5. Platform Independent
6. Architectural Neutral 
   Processor + RAM 
7. Portability :

     Architecture 
---------------------------------------------------------------------
\Features of Java :


1. Simple

- syntax is simialr to C++
- removed confusing concepts like explicit pointers and Operator Overloading
- memory management done by Garbage Collector in Java 


2. Object Oriented Programming 

OO is a methodology for development and maintance of application.

1. Object
2. Class
3. Encapsulation
4. Polymorphism
5. Inheritance
6. Abstraction

3. Robust :

- Strong mem management 

- exception handling mechanism

- type checking mechanism


4. Secure :


5. Platform Independent :

here Platform means OS (operating System)

6. Architectural Neutral :

Architecture means Processor and RAM 

7. Portable :

Portable means Architecture (means one way of classification)

IBM

Apple

Solaris

WORA :  Write Once Run Anywhere

-------------------------------------------------------------------------


**********************************************
Mar 24th Friday
**********************************************

jdk installation :


version : JAVA SE 11 or jdk 1.11

https://www.oracle.com/in/java/technologies/downloads/

Click on Java 11 tab

Click on "Windows" tab

Under Download 

Click  on below link

jdk-11.0.18_windows-x64_bin.exe


Enter Oracle Credentials in below form


Oracle account sign in


if you don't have Oracle Account create a new one from below link


https://profile.oracle.com/myprofile/account/create-account.jspx


-----------------------------------------------
Configuration of Java
------------------------------------------------------------

In Environment VAribales

Create 2 variables 


1. JAVA_HOME

Varibale Name : JAVA_HOME

Value : path till jdk



2.path : 

Varibale Name : path

Value : C:\Program Files\Java\jdk-11\bin

C:\Users\Riyaz>java -version
java version "11.0.18" 2023-01-17 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.18+9-LTS-195)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.18+9-LTS-195, mixed mode)




**********************************************
Mar 27th Monday
**********************************************


										jdk folders
										
										
				lib							bin/tools						jre



lib : Library 

predefined stuff which helps in designing / development of java applications


										lib
										|
			collection of jars ( jar is similar to zip folder)
										|
			collection of packages (package is similar to folder )
										|
			Collection of Classes 				and 			Interfaces  
							|										|					
					________________						   ________________
					|				|						  |				 	|
				variables		methods                Constants/Fields		Abstract methods
				
				
				

----------------------------------------------------------------------------

bin : binaries (some excutable files)

			
javac : tool or command ussed to compile java program
 
 syntax 
 
javac FileName.java



java : this tool or command is used to run/execute the compiled java program


syntax


java FileName


-------------------------------------------------------------------------------

jre :  (Java Runtime Environment)


JVM are abstract machines 

having tasks with no body

who will fill the tasks body ? Ans : JRE 



										JVM (Java Virtual Machine)
													|
							------------------------------------------------						
							|						|					     |
						CLSS						EE						GC
					Class Loader Subsystem		Execution Engine		Garbage Collector
													|
											 ________________
											 |				 |
										Interpreter	        JIT compiler (Just In Time)
										
CLSS:											

- Loading

- Linking 

- Intialization



**********************************************
Mar 28th Tuesday
**********************************************

					
----------------------------------
EE	 :

Interpreter	:  converts BC to MC   based on OS  and also execute

JIT Compiler : 

comes to picture when we have loops or iterative conditions 
to improve high performance


-----------------------------------------

GC (Garbage Collection)

1) Mark  - to identify the varibales or objects which can be deallocated


2) Sweep - to deallocate the memory


----------------------------------------------

Structure of Java Program

-----------------------------------------------

consists of 4 sections

1. Documentation Section

2. Package Section

3. Import Section

4. Class / Interface Section



--------------------------------------------------------------

1. Documentation Section :

used for documentation purpose means comments

single line comment  by means of 

//

multi line comment 

/*  ljlkjkljlkj

kjhjkhkjhjkhkj

kjhkjhkjhjkhhk */


--------------------------------------------------------------


2. Package Section :

Package means Folders

in java is package is used for logical grouping of your classes and interfaces

syntax :

package package-name;

e.g  

package mar27th;

package smoke;

--------------------------------------------------------------


3. Import Section 
										
3 ways to use import statement

i)  import packname.*;   ==> this is not recommended in real time 


e.g 

import java.util.*;


ii) import packname.ClassName;

e.g import java.util.Scanner; ==> this is recommended



Note : 

default package of java is 

java.lang package , there is no need to import java.lang

---------------------------------------------------------------

Class or Interface Section


syntax :


access-specifier access-modifier class ClassName
{

//variables


//methods


}


**********************************************
Mar 29th Wednesday
**********************************************

------------------------------------------
Naming Convention
------------------------------------------


packages ( all lower case  ) :

e.g 


java.util

org.openqa.selenium

based

smoke

Classes / Interfaces  :  Title Case

e.g for Classes

Scanner

Sum

ChromeDriver

HashSet


e.g of Interfaces 

List

Iterator

WebDriver


variables/Objects :  (Camel Case =  Lower Case + Title Case)

e.g 

x

netSalary

costOfItem

allLinks

rollNo


methods / Abstract methods :  (Camel Case =  Lower Case + Title Case)

if some CamelCase along if braces (  


e.g 

println

nextInt

main 


 Constants/Fields  :  (All upper case)
 
 e.g 
 
 
 PI
 
 MAX_LIMIT
 
 
 =====================================================
 ============ Variables in Java ======================
 =====================================================
 
variables are classified based on location and behviour into 3 types

				
									Variables
									
									
			1)Local					  2)Instance or non-static		3) Static 
			
			
 =====================================================
 ============ Memory Blocks in Java===================
 =====================================================
 
 1) Class Area / Method Area
 
 .class files
 
 static variables
 
 static methods
 
 
 2) Heap Area ( Dynamic memory allocation)
 
 Objects
 
 Arrays
 
 3) Java Stack Area (JSA)
 
 local varibales
 
 expressions 
  
 current running logics
 
 4) String Constant Pool Area  (SCPA)
 
 for String literals 
 
 String s="Live Tech"
 
 
 -------------------------------
 Local Varibale 
 -------------------------------
 
 Def : Local varibales are the varibales which are declared inside methods
 
 syntax of varibale :
 
 access-specifier access-modifier data-type varibaleName = some value ; ==> declaration and initialization
 
 
 access-specifier access-modifier data-type varibaleName; == > varibale declaration
 
 varibaleName = some value ; ==> variable initialization 
 
 
 			
 =====================================================
 ============ Data Types in Java   ===================
 =====================================================
 
 Java is strongly typed language
		
		
					Data Types in Java
					
					
		1) Primitive datatypes(8)		2) non-primitive datatypes
													 or 
												Derived datatypes  [arrays ,String , Objects etc..]

 												
1) Def :

 varibales which are declared inside methods

2) where memory is allocated ?

Java stack Area 

3) When memory is getting allocated ?

when the method is called (during execution)

4) what is the calling style ?

the variable name itself

5) what is the scope or life time ?

till end of that method


Note : 

VariablesDemo1.java:14: error: variable y might not have been initialized
System.out.println("y is "+y);

JVM/CLSS won't intializa Local varibales ,

It's the duty / resposibity of Programmer / devloper to initilize some value to local variable

??????????????????????????????
Download Eclipse 

https://www.eclipse.org/downloads/


Click "Download package "  ==> MORE DOWNLOADS  on Right Side

Click on "Eclipse 2021-09 (4.21)" link

choose second one "Eclipse IDE for Enterprise Java and Web Developers"

Click on Windows x86_64



??????????????????????????????



**********************************************
Apr 4th Tuesday
**********************************************

 =====================================================
 ============ Variables in Java (cont..) ======================
 =====================================================
 
variables are classified based on location and behviour into 3 types

				
									Variables
									
									
			1)Local					  2)Instance or non-static		3) Static 


2)Instance or non-static	

 												
1) Def :

 variables declared inside a class but outside of method .
 
2) When memory is getting allocated ?

when you create an instance or object for the class where variable is declared ,
then only memory will get allocated .

how to create an instance or object of class ?

ClassName objectName=new ClassName();


3) where memory is allocated ?

Heap Area

4) what is the calling style ?


objectName.variableName

5) what is the scope or life time ?

till the last usage of object

================================
Static  Variables
=================================

												
1) Def :

 variables declared inside a class but outside of method having static modifier or keyword
 
2) When memory is getting allocated ?

during compile time 

3) where memory is allocated ?

Class Area / Method Area


4) what is the calling style ?

ClassName.variableName


5) what is the scope or life time ?

till end of program

**********************************************
Apr 5th Wednesday
**********************************************

 =====================================================
 ============ Methods in Java   ======================
 =====================================================
 
 Method is a set of instructions to perform some task .
 
 e.g 
 
 println("Hello World") 
 
 here println is methods having some lines of code which we are using
 
 ads of Methods :
 
 1) reduces duplictaion/redundancy of code
 2) improves code clarity
 3) resuability
 4) easy debugging 
 
									methods
									
									
				non-static								static
				
syntax :

access-specifier access-modifier return-type methodName(arguments / paramters)
{
//statements


return statement;

}


???????????????????????????????????????????????

Write A Program 
to calculate area of rectangle 

hint : area = length * breadth ;

use methods concept;
?????????????????????????????????????????????????

?????????????????????????????????????????????????
Write A Program 
to calculate simple interest

hint : SI = P*T*R /100;

SI simpleInterest
P princial amount
T time or duration
R rate of interest

use methods concept;
???????????????????????????????????????????????????



**********************************************
Apr 6th Thursday
**********************************************


OOPs (Object Oriented Programming)

before OOP there was POP (Procedure Oriented Programming)

e.g  C lang , COBOL, BASIC , FORTAN etc ..

Object Oriented Programming 

e.g 

C++ , Java , .net 


1) Object
2) Class 
3) Encapsulation
4) Polymorphism
5) Inheritance
6) Abstraction


Object : 

anything that exists is an object

e.g 

Fan , Chair , Dog ,bank account number etc ..


Object has 3 characteristics

i) State : Data or paramters that represents an object (variable's)

for Marker :

length 12 cm
shape cylindrical
color white


ii) Behaviour : task's or actions performed by Object ( method's)

e.g for Dog 

eating
drinking
sleeping

iii) identity : a unique Id defined by JVM to identify object

---------------------------------------------------------
Class :

A blueprint or template from which you can create an object 

e.g 

animal

automobiles

======================================================
===Object Creation Techniques ========================
======================================================
1) using new operator


ClassName objectName=new ClassName();

2) using Static Factory Method (SFM)


ClassName objectName=ClassName.methodName();

e.g

By by=By.id("username");

here id is a static method present in By class which return object of By class


3) using Non-Static Factory Method (NSFM)

ClassName1 object1=new ClassName1();

ClassName2 object2=object1.methodName();


XSSFWorkbook

XSSFSheet

XSSFWorkbook wb=new XSSFWorkbook();

there is a non-static method called getSheet(String) in XSSFWorkbook class  which will return object of XSSFSheet class

XSSFSheet ws=wb.getSheet("Sheet1");


4) using Clone method

5) using literals

String str="Live Tech";

6) using deserialization 

no syntax

this is used by JVM 



**********************************************
Apr 7th Friday
**********************************************


3) Encapsulation 

Encapsulation in Java is a process of data(varibales) and actions(methods) on data together into a single unit.

so every class is almost encapsulated

Encapsulation = Data Hiding +  Abstraction

e.g 

Medicine like coldact capsule 

ATM mahcine 

To Make Tightly Encapsulated ,

we use "private" access-specifier or access-label

The field Bank.balance is not visible

To overcome this , we will use public methods inside the class 
from which we retrive the private varibales


//getters and setters

are just public methods to retrive or modify private varibales 
through some validation


-------------------
PrintStream Class

4 methods 

1. println  ==> it will print and moves the cursor to next line

2. print  ==> print and cursor will stays in same 

* * * * *
  * * *
    *
3. printf same like printf from c lang meant for formating 

4. format == formating


obj1.setClock(1, 3, 23);
System.out.println(hr+":"+min+":"+sec);
1:3:23


01:03:23

?????????????????????????????????
Create a class DOB

use setter and getter 
to print your dob

expected :

e.g january 5th 1989

DD-MM-YYYY

05-01-1989
???????????????????????????????????




**********************************************
Apr 8th Saturday
**********************************************

Flow control or Control Flow in Java


1) Decission making or Selection statements

i) if else 

syntax :

if(condition)
{

//body

}
else
{

// code when condition is false

}


if only

if else

if else if else 

if else if else if ...... else

------------------
To scan or to take values during runtime  we use methods in Scanner class

java.util


if we want to take integer value

nextInt(): int

System.out.println("Hello World");

System is class present in java.lang

out is an predfined object of PrintStream(java.io) having static keyword



next() : String
next(String) : String
next(Pattern) : String
nextBoolean() : boolean
nextByte() : byte
nextByte(int) : byte
nextDouble() : double
nextFloat() : float
nextInt() : int
nextInt(int) : int
nextLine() : String
nextLong() : long
nextLong(int) : long
nextShort() : short
nextShort(int) : short


ii) switch

input can be byte , short ,int , char , String (from java 1.5)

switch(input)
{

case a : // action
         break;
		 
case b : // action 
		 break;
		 
		 |
		 
		 |
default : // default action
         		 
         




}


?????????????????????????

for 1030 batch

use Switch case to launch different browser 

chrome

firefox

edge

????????????????????????????????


------------------------------------
Loops
-------------------------------------

for loop :


for(initialization ; condition ; increment or decrement)
{

//body or statements

}


while loop :

while(condition)
{
//body or statements
increment or decrement;


}

